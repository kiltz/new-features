// /usr/libexec/java_home -V
// export JAVA_HOME=`/usr/libexec/java_home -v 14`
plugins {
  id "org.sonarqube" version "2.8"  // früher 2.5
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility=12
targetCompatibility=12

repositories
{
	mavenCentral()
}

dependencies
{

	// JUnit 4 Support
	testCompile "junit:junit:4.13"
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.6.2")
  	
  	// JUnit 5
	testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.6.2" 
	testCompile "org.junit.jupiter:junit-jupiter-engine:5.6.2"
		
	// Asssert J
	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.15.0'
	
	// Parameterized tests
	testCompile("org.junit.jupiter:junit-jupiter-params:5.6.2")
	
	// Migration Support to Enable Rules in JUnit 5
	testCompile "org.junit.jupiter:junit-jupiter-migrationsupport:5.6.2"	
}

// JUnit 5 aktivieren
test {
    useJUnitPlatform()
}


tasks.withType(JavaCompile) {	
	// Aktivierung von Switch Expressions Preview  (JDK 13) / Textblocks (JDK 14)
	options.compilerArgs += ["--enable-preview"] 
}

test {
	// für die Beispiele wollen wir Fehler nicht als Build-Fehler werten, da die Beispiel
	// bewusst ein paar Fehler integriert haben
  	ignoreFailures = true

	// Aktivierung von Switch Expressions 
    jvmArgs '--enable-preview'
}

// Anpassungen
apply from: "appTasks.txt"


test {
	// f�r die Beispiele wollen wir Fehler nicht als Build-Fehler werten, da die Beispiel
	// bewusst ein paar Fehler integriert haben
  	ignoreFailures = true
}



// ---------------------------------- DISTRIBUTION / EXECUTABLES ------------------------------

task copyRequiredLibs(type: Copy) {
   from configurations.runtime
   into "$buildDir/libs/requiredLibs"
}

jar {

  dependsOn copyRequiredLibs

  baseName = "Java-9--14-DieNeuerungen"

  manifest {
    attributes(
               "Created-By"             : "Michael Inden",
	                "Specification-Title"    : "Java-9--14 - Die Neuerungen",
	                "Specification-Version"  : "1",
	                "Specification-Vendor"   : "Michael Inden",
	                "Implementation-Title"   : "Java-9--14",
	                "Implementation-Version" : "1",
	                "Implementation-Vendor"  : "Michael Inden",
      "Class-Path": configurations.runtime.collect { "requiredLibs/" + it.getName() }.join(' '))
  }

  // JAR-Dateien mit aufnehmen, dann kann man diese bei Bedarf separat entpacken
  into('requiredLibs') {
  	FileCollection collection = files("$buildDir/libs/requiredLibs")
  	from { collection.collect { it } }
  }
}

// Eigene Tasks
// ------------

def executeClass(final String mainName)  {

	javaexec {
		jvmArgs += ['--enable-preview'] // weil allle so kompiliert wurden!! 
	   	main = mainName
	   	classpath = files("${buildDir}/libs/Java-9--14-DieNeuerungen.jar") + files("${buildDir}/requiredLibs")
	}
}
